;; This file was automatically generated by the Cyclone Scheme compiler
((py-define-method lambda (x r c) (let ((name (cadr x)) (rest (cddr x))) (let ((scheme-name (member (quote scheme-name) rest)) (kw (member (quote kw) rest))) (let ((%define (r (quote define))) (%quote (r (quote quote))) (%cons (r (quote cons))) (%list (r (quote list))) (%identity (r (quote identity))) (%filter (r (quote filter))) (%take-while (r (quote take-while))) (%lambda (r (quote lambda))) (%symbol? (r (quote symbol?))) (%null? (r (quote null?))) (%and (r (quote and))) (%not (r (quote not))) (%if (r (quote if))) (%list->vector (r (quote list->vector))) (py-object-get-attr-string (r (quote py-object-get-attr-string))) (py-object-call-object (r (quote py-object-call-object))) (py-object-call (r (quote py-object-call))) (proc-name (or (and scheme-name (cadr scheme-name)) (string->symbol name))) (obj (r (quote obj))) (rest (r (quote rest)))) (quasiquote ((unquote %define) ((unquote proc-name) (unquote obj) unquote rest) ((unquote py-object-call-object) ((unquote py-object-get-attr-string) (unquote obj) (unquote name)) ((unquote %list->vector) (unquote rest))))))))) (py-define-attribute lambda (x r c) (let ((name (cadr x)) (rest (cddr x))) (let* ((scheme-name (if (null? rest) #f (car rest))) (%define (r (quote define))) (%if (r (quote if))) (%null? (r (quote null?))) (%car (r (quote car))) (py-object-get-attr-string (r (quote py-object-get-attr-string))) (py-object-set-attr-string (r (quote py-object-set-attr-string))) (proc-name (or scheme-name (string->symbol name))) (obj (r (quote obj))) (rest (r (quote rest)))) (quasiquote ((unquote %define) ((unquote proc-name) (unquote obj) unquote rest) ((unquote %if) ((unquote %null?) (unquote rest)) ((unquote py-object-get-attr-string) (unquote obj) (unquote name)) ((unquote py-object-set-attr-string) (unquote obj) (unquote name) ((unquote %car) (unquote rest))))))))) (py-define lambda (x r c) (let* ((%cons (r (quote cons))) (%define (r (quote define))) (%lambda (r (quote lambda))) (%let (r (quote let))) (%begin (r (quote begin))) (%set! (r (quote set!))) (%unless (r (quote unless))) (%hash-table-ref/default (r (quote hash-table-ref/default))) (%hash-table-set! (r (quote hash-table-set!))) (py-eval (r (quote py-eval))) (py-apply (r (quote py-apply))) (raise-python-exception (r (quote raise-python-exception))) (py-callable-check (r (quote py-callable-check))) (py-decref (r (quote py-decref))) (expr (cadr x)) (args (cddr x)) (func (r (quote func))) (proc-name (if (list? expr) (cadr expr) (string->symbol expr))) (form (if (list? expr) (car expr) expr))) (quasiquote ((unquote %define) ((unquote proc-name) (unquote-splicing args)) ((unquote %let) (((unquote func) ((unquote %hash-table-ref/default) *py-functions* (quote (unquote proc-name)) #f))) ((unquote %unless) (unquote func) ((unquote %begin) ((unquote %set!) (unquote func) ((unquote py-eval) (unquote form))) ((unquote %unless) (unquote func) ((unquote raise-python-exception))) ((unquote %hash-table-set!) *py-functions* (quote (unquote proc-name)) (unquote func)))) ((unquote py-apply) (unquote func) (unquote-splicing args))))))) (translate-from-foreign lambda (x r c) (let ((%py-type-from (r (quote py-type-from))) (x (cadr x)) (typ (caddr x))) (quasiquote (((unquote %py-type-from) (unquote typ)) (unquote x))))) (translate-to-foreign lambda (x r c) (let ((%py-type-to (r (quote py-type-to))) (x (cadr x)) (typ (caddr x))) (quasiquote (((unquote %py-type-to) (unquote typ)) (unquote x))))) (py-define-type lambda (x r c) (let ((%define (r (quote define))) (%make-py-type (r (quote make-py-type))) (name (cadr x)) (to (caddr x)) (from (cadddr x))) (quasiquote ((unquote %define) (unquote name) ((unquote %make-py-type) (quote (unquote name)) (unquote to) (unquote from)))))))